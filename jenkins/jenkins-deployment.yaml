apiVersion: v1
kind: Secret
metadata:
  name: jenkins-admin-secret
  namespace: jenkins
stringData:
  password: "Divya@12377"  # Change to your strong password
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-init-script
  namespace: jenkins
data:
  init.groovy: |
    #!groovy
    import jenkins.model.*
    import hudson.security.*
    import hudson.util.Secret
    
    // Get admin password from Kubernetes secret
    def password = new File('/run/secrets/jenkins-admin-password').text.trim()
    
    def instance = Jenkins.getInstance()
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    
    // Create admin account with secret password
    hudsonRealm.createAccount("admin", password)
    instance.setSecurityRealm(hudsonRealm)
    
    // Set authorization strategy
    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    strategy.setAllowAnonymousRead(false)
    instance.setAuthorizationStrategy(strategy)
    
    // Save configuration
    instance.save()
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      securityContext:
        fsGroup: 1000
      serviceAccountName: jenkins
      initContainers:
      - name: permission-fix
        image: alpine:latest
        command: ["sh", "-c", "chown -R 1000:1000 /var/jenkins_home"]
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: jenkins-home
          mountPath: /var/jenkins_home
      containers:
      - name: jenkins
        image: jenkins/jenkins:lts
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        - containerPort: 50000
        env:
        - name: JAVA_OPTS
          value: "-Djenkins.install.runSetupWizard=false"
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 10
          failureThreshold: 10
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        volumeMounts:
        - name: jenkins-home
          mountPath: /var/jenkins_home
        - name: init-script
          mountPath: /var/jenkins_home/init.groovy.d/init.groovy
          subPath: init.groovy
        - name: admin-secret
          mountPath: /run/secrets/jenkins-admin-password
          subPath: password
          readOnly: true
      volumes:
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins-pvc
      - name: init-script
        configMap:
          name: jenkins-init-script
      - name: admin-secret
        secret:
          secretName: jenkins-admin-secret
          optional: false

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
spec:
  storageClassName: manual
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/jenkins"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  namespace: jenkins
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi

---

apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
spec:
  type: LoadBalancer
  ports:
  - name: jenkins-web
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: jenkins-agent
    port: 50000
    targetPort: 50000
    protocol: TCP
  selector:
    app: jenkins

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-crb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
